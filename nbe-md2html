#!/usr/bin/env node

let fs = require('fs')
let path = require('path')
let Mustache = require('mustache')
let lib = require('./lib')

let argv = process.argv.slice(2)
if (argv.length !== 6) {
    console.log('Usage:', path.basename(process.argv[1]), 'file.md index.json config.json header.mustache body.mustache footer.mustache')
    process.exit(1)
}

let [index, config] = argv.slice(1,3)
    .map( v => JSON.parse(fs.readFileSync(v).toString()))
let [header, body, footer] = argv.slice(3,6)
    .map( v => fs.readFileSync(v).toString())
process.stdout.write(convert(argv[0], index, config, header, body, footer))


function convert(file, index, config, header, body, footer) {
    let mp = new lib.MarkdownParser(file)
    let view = Object.assign(mp.front_matter(), {
	file,
	config,
	prev: prev_or_next(file, index, cur => cur-1),
	next: prev_or_next(file, index, cur => cur+1),
	calendar: calendar(file, index),
	body: mp.body()
    })

    header = Mustache.render(header, view)
    body = Mustache.render(body, view)
    footer = Mustache.render(footer, view)

    return [header, body, footer].join("\n")
}

function prev_or_next(file, index, condition) {
    if (lib.is_page(file)) return

    let cur = index.posts.findIndex( v => v.file === file)
    let idx = cur + condition(cur)
    if (cur !== -1 && idx >= 0 && idx <= index.posts.length-1) return {
	link: index.posts[idx].file.replace(/\.md$/, '.html'),
	subject: index.posts[idx].subject,
    }
}

function calendar(file, index) {
    return 'todo'
}
