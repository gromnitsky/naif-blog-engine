#!/usr/bin/env node

let fs = require('fs')
let path = require('path')
let ejs = require('ejs')
let md5 = require('blueimp-md5')
let get = require('lodash.get')
let lib = require('./lib/cli')
let common = require('./lib/common')

let argv = process.argv.slice(2)
if (argv.length !== 6) {
    lib.errx(1, 'Usage:', lib.prog,
	     'NAME index.json config.json header.ejs body.ejs footer.ejs')
}

let [index, config] = argv.slice(1,3).map(lib.json)
let [header, body, footer] = argv.slice(3,6)
    .map( v => fs.readFileSync(v).toString())
let result
try {
    result = convert(argv[0], index, config, header, body, footer)
} catch (e) {
    lib.errx(1, e.message)
}
process.stdout.write(result)


function convert(file, index, config, header, body, footer) {
    let view = {
	file,
	index,
	config,
	type: common.detect_input_type(file),

	// the same `index`, but from a different perspective
	group_by_author: common.index_group_by(index, 'authors'),
	group_by_tag: common.index_group_by(index, 'tags'),

	// complex widgets
	metatags_inline: common.metatags_inline,
	date_human: common.date_human,

	// helpers
	birthtime_ymd: common.birthtime_ymd,
	link: common.link,
	path,
	get,
    }

    let relto = file
    view.root = common.rootdir(relto)

    switch (view.type) {
    case 'post':
	throw new Error(`${file} isn't supported`)
    case 'home':
	relto = ''
	view.root = relto
	view.subject = 'Home'
        view.postlink = common.postlink,
	view.body = file => new lib.MarkdownParser(file).body({baseUrl: file})
	break
    case 'metatags':
	view.subject = metatags(view['group_by_'+path.dirname(file)],
				path.basename(file))
	break
    default: // page
	throw new Error(`${file} isn't supported`)
    }

    header = ejs.render(header, view)
    body = ejs.render(body, view)
    footer = ejs.render(footer, view)

    return [header, body, footer].join("\n")
}

function metatags(group, target) {
    for (let candidate of Object.keys(group)) {
	if (target === md5(candidate)) return candidate
    }
    throw new Error(`failed to find ${target}`)
}
