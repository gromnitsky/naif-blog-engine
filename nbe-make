#!/usr/bin/make -f

src := .
out := _out
fts := _fts
web := $(out)/web

# Startup check #1
$(if $(wildcard $(src)/config.json),,$(error No config.json in the $(realpath $(src))))

mk := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
theme := $(or $(shell json -f $(src)/config.json theme.name),default)

# usage: $(call theme-get,file.ejs)
theme-get = $(firstword $(foreach loc,\
  $(src)/themes/$(theme) $(mk)/themes/$(theme), $(wildcard $(loc)/$1)))

# Startup check #2
templates := body.author.ejs body.ejs body.home.ejs body.tag.ejs footer.ejs header.ejs
$(foreach file,$(templates),$(if $(call theme-get,$(file)),,$(error Theme `$(theme)` is invalid: $(file) is missing)))



# all non-esj files in the current theme
theme.src := $(foreach file,$(filter-out $(templates), \
    $(sort $(notdir \
      $(foreach loc, $(src)/themes/$(theme) $(mk)/themes/$(theme), \
        $(shell find $(loc) -type f 2>/dev/null))))), \
  $(call theme-get,$(file)))

theme.dest := $(filter $(web)/%, \
  $(foreach loc, $(src)/themes/$(theme) $(mk)/themes/$(theme), \
    $(patsubst $(loc)/%, $(web)/%, $(theme.src))))

$(web)/%: $(src)/themes/$(theme)/%
	$(mkdir)
	$(copy)

$(web)/%: $(mk)/themes/$(theme)/%
	$(mkdir)
	$(copy)

.PHONY: compile
compile:
compile := $(theme.dest)



all.src := $(filter-out $(wildcard $(src)/*.mk) $(src)/.gitignore,\
  $(shell find $(src) ! -path "*/.git/*" ! -path '$(src)/$(out)/*' \
               ! -path '*/node_modules/*' \
               ! -path '$(src)/$(fts)/*' ! -path '$(src)/themes/*' -type f))
src.md := $(filter %.md, $(all.src))
all.dest := $(patsubst $(src)/%, $(web)/%, $(all.src))
html.dest := $(patsubst %.md, %.html, $(filter %.md, $(all.dest)))
static.dest := $(filter-out %.md, $(all.dest))

compile += $(html.dest) $(static.dest)

.SECONDEXPANSION:

$(web)/%.html: $(src)/%.md $(src)/config.json $(call theme-get,header.ejs) $(call theme-get,body.ejs) $(call theme-get,footer.ejs) $$(call post-deps,$$*)
	$(mkdir)
	$(mk)/post $< $(src)/config.json $(call theme-get,header.ejs) $(call theme-get,body.ejs) $(call theme-get,footer.ejs) > $@

# grab the deps for a post/page IF the deps are in `XXXX/page/`
# dir, when the post/page is `XXXX/page.md`
#
# $(call post-deps,$*)
post-deps = $(patsubst $(src)/%, $(web)/%, $(filter $(src)/$1/%, $(all.src)))

$(web)/index.json: $(src.md)
	$(mkdir)
	$(mk)/index $^ > $@

$(static.dest): $(web)/%: $(src)/%
	$(mkdir)
	$(copy)

$(out)/metatargets.mk: $(web)/index.json
	$(mk)/print-metatargets $< $(web) > $@
	@echo '*** RESTARTING MAKE ***'

include $(out)/metatargets.mk

$(web)/a/%.html: $(web)/index.json $(src)/config.json $(call theme-get,header.ejs) $(call theme-get,body.author.ejs) $(call theme-get,footer.ejs)
	$(mkdir)
	$(mk)/metapage author/$* $^ > $@

$(web)/t/%.html: $(web)/index.json $(src)/config.json $(call theme-get,header.ejs) $(call theme-get,body.tag.ejs) $(call theme-get,footer.ejs)
	$(mkdir)
	$(mk)/metapage tag/$* $^ > $@

$(web)/index.html: $(web)/index.json $(src)/config.json $(call theme-get,header.ejs) $(call theme-get,body.home.ejs) $(call theme-get,footer.ejs)
	$(mkdir)
	$(mk)/metapage home $^ > $@

compile += $(web)/index.html $(web)/index.json

$(web)/rss.xml: $(web)/index.json $(src)/config.json
	$(mkdir)
	$(mk)/rss $^ > $@

compile += $(web)/rss.xml

$(web)/lib.js: $(mk)/lib/common.js $(mk)/lib/web.js
	$(mkdir)
	browserify -d -r $(mk)/lib/common:common -r $(mk)/lib/web:web | $(terser)

$(web)/%.js: $(mk)/%.js
	$(mkdir)
	browserify --im -d $< | $(terser)

js.src := $(wildcard $(mk)/*.js)
js.dest := $(patsubst $(mk)/%, $(web)/%, $(js.src)) $(web)/lib.js
js.dest.map := $(addsuffix .map,$(js.dest))
vendor.src := chartist/dist/chartist.css chartist/dist/chartist.min.js \
	endnotes/endnotes.js
vendor.dest := $(addprefix $(web)/vendor/,$(vendor.src))

$(web)/vendor/%: $(mk)/node_modules/%
	$(mkdir)
	$(copy)

compile += $(js.dest) $(vendor.dest)

# a sitemap for the google console
$(web)/sitemap.txt: $(web)/index.json
	$(mkdir)
	@echo Generating $@
	@echo "$(compile)" | tr ' ' \\n | grep '\.html$$' | grep -v 'google.*html' | grep -v '$(web)/[at]/' | sort -r | sed 's|^$(web)/|$(shell json < config.json rss.baseUrl)|' > $@

compile += $(web)/sitemap.txt

compile: $(compile)

copy = cp $< $@
mkdir = @mkdir -p $(dir $@)
shellquote = '$(subst ','\'',$(1))'
#'
# also makes $@.map source-map file
terser = terser -m --source-map content=inline,url=$(notdir $@).map -o $@

.DELETE_ON_ERROR:



# print a diff between should-be files & a real situation
.PHONY: check
check: compile
	@echo $(js.dest.map) "$(strip $(compile))" | tr ' ' \\n | sort > should
	@find $(web) -type f | sort > real
	@diff -u should real; c=$$?; rm should real; exit $$c

new.post := $(src)/$(shell mktemp -u `date +%Y/%m/%d`/XXXXXX.md)
new.author = $(shell json < $(src)/config.json rss.itunes.author)
.PHONY: new
new:
	@mkdir -p $(dir $(new.post))
	@printf -- '---\nsubject: A New Post\nauthors: %s\ntags: \n---\n\nHi' \
		$(call shellquote,$(new.author)) > $(new.post)
	$$EDITOR $(new.post) &

define help :=
if the build fails, rm $(web)/index.json, then try again

compile		(default)
new		create a new blog post
check		check for superfluous files in $(web)
fts-create	recreate the FTS db+server in $(fts)

$(web)/yyyy/mm/dd/post.html	compile only 1 particular post
-f ~/lib/debug.mk pp-compile	print all file targets
endef

.PHONY: help
help:; $(info $(help))@:



fts.db := $(fts)/db.sqlite3

$(fts.db): $(src.md)
	$(mkdir)
	$(mk)/node_modules/nfts/nfts-create -o $@ $^

$(fts)/.gitignore: $(fts.db)
	$(file > $(fts)/package.json,$(fts.package.json))
	mkdir -p $(fts)/lib
	cp $(mk)/node_modules/nfts/nfts-server $(fts)
	cp $(mk)/node_modules/nfts/lib/finder.js $(fts)/lib
	echo node_modules > $@
	git -C $(fts) init
	git -C $(fts) add .
	-git -C $(fts) commit -m upd

.PHONY: fts-create
fts-create: $(fts)/.gitignore

define fts.package.json :=
{
  "engines": { "node": "18.8.0" },
  "scripts": { "start": "node nfts-server db.sqlite3" },
  "dependencies": {
    "better-sqlite3": "^7.6.2",
    "minimist": "^1.2.6",
    "shell-quote": "^1.7.3"
  }
}
endef

-include $(src)/local.mk
