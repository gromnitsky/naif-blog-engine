#!/usr/bin/make -f

src := .
out := _out
web := $(out)/web

templates := $(addprefix $(src)/,body.author.ejs body.ejs body.home.ejs body.tag.ejs footer.ejs header.ejs)
req := $(templates) $(src)/config.json
ifneq ($(wildcard $(req)), $(req))
$(error The curren dir ($(CURDIR)) does not look like a naif-blog-engine material. Run nbe-make-new-blog to create one)
endif

mk := $(dir $(realpath $(lastword $(MAKEFILE_LIST))))
all.src := $(filter-out $(wildcard $(src)/*.mk) $(templates) \
  $(src)/.gitignore $(src)/node_modules, \
  $(shell find $(src) ! -path "*/.git/*" ! -path '$(src)/$(out)/*' -type f))
all.dest := $(patsubst $(src)/%, $(web)/%, $(all.src))
html.dest := $(patsubst %.md, %.html, $(filter %.md, $(all.dest)))
static.dest := $(filter-out %.md, $(all.dest))

.PHONY: compile
compile:
compile := $(html.dest) $(static.dest)

.SECONDEXPANSION:

$(web)/%.html: $(src)/%.md $(src)/config.json $(src)/header.ejs $(src)/body.ejs $(src)/footer.ejs $$(call post-deps,$$*)
	$(mkdir)
	$(mk)/post $< $(src)/config.json $(src)/header.ejs $(src)/body.ejs $(src)/footer.ejs > $@

# grab the deps for a post/page IF the deps are in `XXXX/page/`
# dir, when the post/page is `XXXX/page.md`
#
# $(call post-deps,$*)
post-deps = $(wildcard $(src)/$1/*)

# at 1st glance this looks stupid: why does it depend on .html output
# in .md stead? but as a post, in turn, can depend on its included
# files & the post recompiles into the html when its deps change, this
# means that the .md file inself could be still older then its
# included deps! hence index.json may become stale if it depends on
# .md files.
$(web)/index.json: $(html.dest)
	$(mkdir)
	$(mk)/index $(filter %.md, $(all.src)) > $@

$(static.dest): $(web)/%: $(src)/%
	$(mkdir)
	$(copy)

$(out)/metatargets.mk: $(web)/index.json
	$(mk)/print-metatargets $< $(web) > $@
	@echo '*** RESTARTING MAKE ***'

include $(out)/metatargets.mk

$(web)/a/%.html: $(web)/index.json $(src)/config.json $(src)/header.ejs $(src)/body.author.ejs $(src)/footer.ejs
	$(mkdir)
	$(mk)/metapage author/$* $^ > $@

$(web)/t/%.html: $(web)/index.json $(src)/config.json $(src)/header.ejs $(src)/body.tag.ejs $(src)/footer.ejs
	$(mkdir)
	$(mk)/metapage tag/$* $^ > $@

$(web)/index.html: $(web)/index.json $(src)/config.json $(src)/header.ejs $(src)/body.home.ejs $(src)/footer.ejs
	$(mkdir)
	$(mk)/metapage home $^ > $@

compile += $(web)/index.html $(web)/index.json

$(web)/rss.xml: $(web)/index.json $(src)/config.json
	$(mkdir)
	$(mk)/rss $^ > $@

compile += $(web)/rss.xml

# also makes $@.map source-map file
$(web)/nav.js: $(mk)/nav.js $(mk)/lib/common.js $(mk)/lib/web.js
	$(mkdir)
	$(browserify)

$(web)/fts.js: $(mk)/fts.js $(mk)/lib/web.js
	$(mkdir)
	$(browserify)

compile += $(web)/nav.js $(web)/fts.js

# a sitemap for the google console
$(web)/sitemap.txt: $(web)/index.json
	$(mkdir)
	@echo "$(strip $(filter-out $(web)/google%.html,$(compile)))" | tr ' ' \\n | grep '\.html$$' | sort -r | sed 's|^$(web)/|$(shell json < config.json rss.baseUrl)|' > $@

compile += $(web)/sitemap.txt

compile: $(compile)

copy = cp $< $@
mkdir = @mkdir -p $(dir $@)
shellquote = '$(subst ','\'',$(1))'
#'
browserify = browserify -d $< | terser -m --source-map content=inline,url=$(notdir $@).map -o $@

.DELETE_ON_ERROR:



# print a diff between should-be files & a real situation
.PHONY: check
check: compile
	@echo $(web)/nav.js.map "$(strip $(compile))" | tr ' ' \\n | sort > should
	@find $(web) -type f | sort > real
	@diff -u should real; c=$$?; rm should real; exit $$c

new.date := $(shell date +%Y/%m/%d)
new.post := $(src)/$(shell mktemp -u $(new.date)/XXXXXX.md)
new.author := $(shell json < $(src)/config.json rss.author)
.PHONY: new
new:
	@mkdir -p $(dir $(new.post))
	@printf -- '---\nsubject: A New Post\nauthors: %s\ntags: \n---\n\nHi' \
		$(call shellquote,$(new.author)) > $(new.post)
	@echo TEST: nbe-make $(patsubst %.md, %.html, $(patsubst $(src)/%, $(web)/%, $(new.post)))
	$$EDITOR $(new.post) &

define help :=
if the build fails, rm $(web)/index.json, then try again

compile		(default)
new		create a new blog post
check		check for superfluous files in $(web)

$(web)/yyyy/mm/dd/post.html	compile only 1 particular post
-f ~/lib/debug.mk pp-compile	print all file targets
endef

.PHONY: help
help:; $(info $(help))@:

-include $(src)/local.mk
